import 'package:get_it/get_it.dart';
import 'package:uuid/uuid.dart';

import 'core/constants/app_constants.dart';
import 'core/api/api_client.dart';
import 'core/api/openrouter_api_service.dart';
import 'core/services/secure_storage_service.dart';
import 'core/services/biometric_auth_service.dart';
import 'core/services/backend_api_service.dart';
import 'core/services/crisis_intervention_service.dart';
import 'core/services/sync_scheduler_service.dart';
import 'core/services/push_notification_service.dart';
import 'features/auth/bloc/auth_bloc.dart';
import 'features/auth/data/datasources/auth_remote_datasource.dart';
import 'features/auth/data/datasources/auth_remote_datasource_impl.dart';
import 'features/auth/domain/repositories/auth_repository.dart';
import 'features/auth/data/repositories/auth_repository_impl.dart';
import 'features/little_brain/data/services/background_sync_service.dart';
import 'features/little_brain/data/repositories/little_brain_local_repository.dart';
import 'features/little_brain/data/services/local_ai_service.dart';
import 'features/little_brain/domain/usecases/little_brain_local_usecases.dart';
import 'features/home/domain/usecases/home_content_usecases.dart';
import 'features/chat/domain/repositories/chat_repository.dart';
import 'features/chat/data/repositories/chat_repository_impl.dart';
import 'features/chat/data/datasources/chat_local_datasource.dart';
import 'features/chat/data/datasources/chat_local_datasource_impl.dart';
import 'features/chat/data/datasources/chat_remote_datasource.dart';
import 'features/chat/data/datasources/chat_remote_datasource_impl.dart';
import 'features/chat/domain/services/chat_personality_service.dart';
import 'features/chat/domain/usecases/send_message.dart';
import 'features/chat/domain/usecases/get_conversation_history.dart';
import 'features/chat/presentation/bloc/chat_bloc.dart';
import 'features/growth/domain/usecases/mood_tracking_usecases.dart';
import 'features/psychology/domain/usecases/psychology_testing_usecases.dart';

// import 'injection_container.config.dart' // Will be generated by build_runner

final getIt = GetIt.instance;

Future<void> configureDependencies() async {
  // Register core services manually until build_runner generates config
  getIt.registerSingleton<ApiClient>(ApiClient());
  getIt.registerSingleton<SecureStorageService>(SecureStorageService.instance);
  getIt.registerSingleton<BiometricAuthService>(BiometricAuthService.instance);
  
  // Register API services with properly configured Dio for OpenRouter
  getIt.registerSingleton<OpenRouterApiService>(
    OpenRouterApiService(getIt<ApiClient>().dio, baseUrl: AppConstants.openRouterBaseUrl)
  );
  
  // Register Backend API service
  getIt.registerSingleton<BackendApiService>(
    BackendApiService(
      getIt<ApiClient>().dio,
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
    ),
  );
  
  // Register Crisis Intervention service
  getIt.registerSingleton<CrisisInterventionService>(
    CrisisInterventionService(),
  );
  
  // Register Little Brain services
  getIt.registerLazySingleton<LocalAIService>(
    () => LocalAIService(),
  );
  
  getIt.registerLazySingleton<LittleBrainLocalRepository>(
    () => LittleBrainLocalRepository(getIt<LocalAIService>()),
  );
  
  // Register Little Brain UseCases
  getIt.registerLazySingleton<AddMemoryLocalUseCase>(
    () => AddMemoryLocalUseCase(getIt<LittleBrainLocalRepository>()),
  );
  
  getIt.registerLazySingleton<BackgroundSyncService>(
    () => BackgroundSyncService(
      getIt<LittleBrainLocalRepository>(),
      getIt<BackendApiService>(),
    ),
  );
  
  // Register Sync Scheduler service
  getIt.registerSingleton<SyncSchedulerService>(
    SyncSchedulerService(),
  );
  
  // Register Push Notification service (only if enabled)
  if (AppConstants.enablePushNotifications) {
    getIt.registerSingleton<PushNotificationService>(
      PushNotificationService(getIt<BackendApiService>()),
    );
  }
  
  // Register auth datasources and repositories
  getIt.registerLazySingleton<AuthRemoteDataSource>(
    () => AuthRemoteDataSourceImpl(getIt<BackendApiService>()),
  );
  
  getIt.registerLazySingleton<AuthRepository>(
    () => AuthRepositoryImpl(
      getIt<AuthRemoteDataSource>(),
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
    ),
  );
  
  // Register Auth BLoC
  getIt.registerFactory<AuthBloc>(
    () => AuthBloc(
      getIt<BackendApiService>(),
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
    ),
  );
  
  // Register Feature dependencies (MoodTracking, Psychology, Chat, Home)
  
  // 1. Register MoodTracking dependencies
  getIt.registerLazySingleton<MoodTrackingUseCases>(
    () => MoodTrackingUseCases(getIt<LittleBrainLocalRepository>()),
  );
  
  // 2. Register Psychology dependencies
  getIt.registerLazySingleton<PsychologyTestingUseCases>(
    () => PsychologyTestingUseCases(getIt<LittleBrainLocalRepository>()),
  );
  
  // 3. Register Chat dependencies
  // 3.1 Register Chat services
  getIt.registerLazySingleton<ChatPersonalityService>(
    () => ChatPersonalityService(
      getIt<PsychologyTestingUseCases>(),
      getIt<MoodTrackingUseCases>(),
      getIt<LittleBrainLocalRepository>(),
    ),
  );
  
  // 3.2 Register Chat data sources
  getIt.registerLazySingleton<ChatLocalDataSource>(
    () => ChatLocalDataSourceImpl(),
  );
  
  getIt.registerLazySingleton<ChatRemoteDataSource>(
    () => ChatRemoteDataSourceImpl(
      apiService: getIt<OpenRouterApiService>(),
      uuid: const Uuid(),
    ),
  );
  
  // 3.3 Register Chat repository
  getIt.registerLazySingleton<ChatRepository>(
    () => ChatRepositoryImpl(
      remoteDataSource: getIt<ChatRemoteDataSource>(),
      localDataSource: getIt<ChatLocalDataSource>(),
      personalityService: getIt<ChatPersonalityService>(),
      addMemoryUseCase: getIt<AddMemoryLocalUseCase>(),
    ),
  );
  
  // 3.4 Register Chat use cases
  getIt.registerLazySingleton<SendMessageUseCase>(
    () => SendMessageUseCase(getIt<ChatRepository>()),
  );
  
  getIt.registerLazySingleton<GetConversationHistoryUseCase>(
    () => GetConversationHistoryUseCase(getIt<ChatRepository>()),
  );
  
  // 3.5 Register Chat bloc
  getIt.registerFactory<ChatBloc>(
    () => ChatBloc(
      sendMessageUseCase: getIt<SendMessageUseCase>(),
      getConversationHistoryUseCase: getIt<GetConversationHistoryUseCase>(),
    ),
  );
  
  // 4. Register Home content use cases
  getIt.registerLazySingleton<HomeContentUseCases>(
    () => HomeContentUseCases(
      getIt<LittleBrainLocalRepository>(),
      getIt<MoodTrackingUseCases>(),
      getIt<PsychologyTestingUseCases>(),
      getIt<OpenRouterApiService>(),
    ),
  );
}

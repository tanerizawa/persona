import 'package:get_it/get_it.dart';
import 'package:uuid/uuid.dart';
import 'package:dio/dio.dart';
import 'package:dartz/dartz.dart';
import '../api/api_client.dart';
import '../api/openrouter_api_service.dart';

// Import Little Brain files
import '../../features/little_brain/domain/repositories/little_brain_repository.dart';
import '../../features/little_brain/data/repositories/little_brain_local_repository.dart';
import '../../features/little_brain/data/services/local_ai_service.dart';

// Import new production services
import '../services/secure_storage_service.dart';
import '../services/biometric_auth_service.dart';
import '../services/error_tracking_service.dart';
import '../services/performance_service.dart';
import '../services/backend_api_service.dart';
import '../services/user_session_service.dart';
import '../../features/auth/bloc/auth_bloc.dart';

// Import use cases and other BLoCs
import '../../features/home/domain/usecases/home_content_usecases.dart';
import '../../features/growth/domain/usecases/mood_tracking_usecases.dart';
import '../../features/psychology/domain/usecases/psychology_testing_usecases.dart';
import '../../features/chat/presentation/bloc/chat_bloc.dart';
import '../../features/chat/domain/usecases/send_message.dart';
import '../../features/chat/domain/usecases/get_conversation_history.dart';
import '../../features/chat/domain/repositories/chat_repository.dart';
import '../../features/chat/domain/entities/message.dart';
import '../../features/chat/data/datasources/chat_local_datasource.dart';
import '../../features/chat/data/datasources/chat_local_datasource_impl.dart';
import '../../features/little_brain/domain/usecases/little_brain_local_usecases.dart';
import '../errors/failures.dart';
import '../../features/auth/domain/usecases/clear_user_data_usecase.dart';

// import 'injection.config.dart'; // Will be generated by build_runner

final GetIt getIt = GetIt.instance;

Future<void> configureDependencies() async {
  // Initialize with manual registration until build_runner generates the config
  await _registerCoreServices();
  await _registerLittleBrainServices();
}

// Register core services manually
Future<void> _registerCoreServices() async {
  // Register core dependencies
  getIt.registerSingleton<Uuid>(const Uuid());
  getIt.registerSingleton<SecureStorageService>(SecureStorageService.instance);
  getIt.registerSingleton<BiometricAuthService>(BiometricAuthService.instance);
  getIt.registerSingleton<UserSessionService>(
    UserSessionService(getIt<SecureStorageService>()),
  );

  // Register API client
  final apiClient = ApiClient();
  getIt.registerSingleton<ApiClient>(apiClient);
  getIt.registerSingleton<Dio>(apiClient.dio);

  // Register OpenRouter API service
  getIt.registerSingleton<OpenRouterApiService>(
    OpenRouterApiService(apiClient.dio),
  );

  // Register Backend API service with dependencies
  getIt.registerSingleton<BackendApiService>(
    BackendApiService(
      getIt<Dio>(),
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
      ErrorTrackingService(),
      PerformanceService(),
    ),
  );

  // Register Chat local data source (needed for ClearUserDataUseCase)
  getIt.registerSingleton<ChatLocalDataSource>(ChatLocalDataSourceImpl());
}

// Register Little Brain local-first services
Future<void> _registerLittleBrainServices() async {
  // Register Little Brain services
  final localAI = LocalAIService();
  getIt.registerSingleton<LocalAIService>(localAI);
  getIt.registerSingleton<LittleBrainRepository>(
    LittleBrainLocalRepository(localAI),
  );

  // Register use cases that depend on LittleBrainLocalRepository
  getIt.registerSingleton<AddMemoryLocalUseCase>(
    AddMemoryLocalUseCase(
      getIt<LittleBrainRepository>() as LittleBrainLocalRepository,
    ),
  );

  getIt.registerSingleton<ClearAllLocalDataUseCase>(
    ClearAllLocalDataUseCase(
      getIt<LittleBrainRepository>() as LittleBrainLocalRepository,
    ),
  );

  // Register ClearUserDataUseCase (after all dependencies are available)
  getIt.registerSingleton<ClearUserDataUseCase>(
    ClearUserDataUseCase(
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
      getIt<ChatLocalDataSource>(),
      getIt<ClearAllLocalDataUseCase>(),
    ),
  );

  // Register Auth BLoC with correct constructor parameters
  getIt.registerFactory<AuthBloc>(
    () => AuthBloc(
      getIt<BackendApiService>(),
      getIt<SecureStorageService>(),
      getIt<BiometricAuthService>(),
      getIt<ClearUserDataUseCase>(),
      getIt<UserSessionService>(),
    ),
  );

  getIt.registerSingleton<MoodTrackingUseCases>(
    MoodTrackingUseCases(getIt<LittleBrainRepository>()),
  );

  getIt.registerSingleton<PsychologyTestingUseCases>(
    PsychologyTestingUseCases(getIt<LittleBrainRepository>()),
  );

  // Register HomeContentUseCases (depends on multiple services)
  getIt.registerSingleton<HomeContentUseCases>(
    HomeContentUseCases(
      getIt<LittleBrainRepository>(),
      getIt<MoodTrackingUseCases>(),
      getIt<PsychologyTestingUseCases>(),
      getIt<OpenRouterApiService>(),
    ),
  );

  // Register Chat services with simple mock repository for now
  getIt.registerSingleton<ChatRepository>(_SimpleChatRepository());

  getIt.registerSingleton<SendMessageUseCase>(
    SendMessageUseCase(getIt<ChatRepository>()),
  );

  getIt.registerSingleton<GetConversationHistoryUseCase>(
    GetConversationHistoryUseCase(getIt<ChatRepository>()),
  );

  getIt.registerFactory<ChatBloc>(
    () => ChatBloc(
      sendMessageUseCase: getIt<SendMessageUseCase>(),
      getConversationHistoryUseCase: getIt<GetConversationHistoryUseCase>(),
      userSessionService: getIt<UserSessionService>(),
    ),
  );
}

// Simple temporary chat repository implementation
class _SimpleChatRepository implements ChatRepository {
  @override
  Future<Either<Failure, Message>> sendMessage(
    String content,
    List<Message> conversationHistory,
  ) async {
    // Simple mock response
    final message = Message(
      id: 'temp_${DateTime.now().millisecondsSinceEpoch}',
      content:
          'Hello! This is a temporary response. The full chat system will be implemented soon.',
      role: MessageRole.assistant,
      timestamp: DateTime.now(),
    );
    return Right(message);
  }

  @override
  Future<Either<Failure, List<Message>>> getConversationHistory() async {
    // Return empty history for now
    return const Right([]);
  }

  @override
  Future<Either<Failure, void>> saveConversation(List<Message> messages) async {
    // Mock save - do nothing for now
    return const Right(null);
  }

  @override
  Future<Either<Failure, void>> clearConversation() async {
    // Mock clear - do nothing for now
    return const Right(null);
  }
}
